(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{285:function(t,s,a){"use strict";a.r(s);var _=a(14),e=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"python-笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python-笔记"}},[t._v("#")]),t._v(" Python 笔记")]),t._v(" "),s("h2",{attrs:{id:"序列类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序列类型"}},[t._v("#")]),t._v(" 序列类型")]),t._v(" "),s("p",[t._v("Python 内置序列类型有很多，按照存放数据的方式，分为两类：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("容器序列: "),s("code",[t._v("list")]),t._v(", "),s("code",[t._v("tuple")]),t._v(" 和 "),s("code",[t._v("collections.deque")]),t._v(" 等能存放不同类型的数据")])]),t._v(" "),s("li",[s("p",[t._v("扁平序列: "),s("code",[t._v("str")]),t._v(", "),s("code",[t._v("bytes")]),t._v(", "),s("code",[t._v("bytearray")]),t._v(", "),s("code",[t._v("memoryview")]),t._v(" 和 "),s("code",[t._v("array.array")]),t._v(" 等只能容纳一种序列。")])])]),t._v(" "),s("h3",{attrs:{id:"list-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-类型"}},[t._v("#")]),t._v(" list 类型")]),t._v(" "),s("h4",{attrs:{id:"列表推导式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列表推导式"}},[t._v("#")]),t._v(" 列表推导式")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("newlist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("expression "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" iterable "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" condition "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("语法精简，效率比循环高，没有变量污染.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Python 没有块作用域")])]),t._v(" "),s("h4",{attrs:{id:"切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切片"}},[t._v("#")]),t._v(" 切片")]),t._v(" "),s("p",[t._v("切片左闭右开，支持负数索引，如 "),s("code",[t._v("list[-1]")]),t._v(" 表示最后一个元素。")]),t._v(" "),s("h4",{attrs:{id:"常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),s("p",[s("code",[t._v("list.sort")]),t._v(" 方法会就地排序列表，返回 None。"),s("code",[t._v("sorted")]),t._v(" 会新建一个列表作为返回值，不会改变原列表。")]),t._v(" "),s("h4",{attrs:{id:"操作列表般操作对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作列表般操作对象"}},[t._v("#")]),t._v(" 操作列表般操作对象")]),t._v(" "),s("p",[t._v("列表的语法太甜了，对象也想来分一杯羹，只要实现相应的 "),s("strong",[t._v("魔术函数")]),t._v(" 就可以了。")]),t._v(" "),s("ul",[s("li",[t._v("索引访问和切片: "),s("code",[t._v("__getitem__")]),t._v(" 和 "),s("code",[t._v("__setitem__")])]),t._v(" "),s("li",[s("code",[t._v("for")]),t._v(" 循环: "),s("code",[t._v("__iter__")]),t._v(" 或 "),s("code",[t._v("__getitem__")])]),t._v(" "),s("li",[s("code",[t._v("len")]),t._v(" 计算: "),s("code",[t._v("__len__")])]),t._v(" "),s("li",[s("code",[t._v("+ 拼接")]),t._v(": "),s("code",[t._v("__add__")])]),t._v(" "),s("li",[s("code",[t._v("* 复制")]),t._v(": "),s("code",[t._v("__mul__")])])]),t._v(" "),s("h3",{attrs:{id:"tuple-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuple-类型"}},[t._v("#")]),t._v(" tuple 类型")]),t._v(" "),s("p",[t._v("元组其实是对数据的记录(不可变)：字段内容+字段位置")]),t._v(" "),s("p",[t._v("元组拆包是一个好用的语法糖:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rest "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"文件与编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件与编码"}},[t._v("#")]),t._v(" 文件与编码")]),t._v(" "),s("p",[t._v("Byte object 是 二进制序列，String 是 字符序列。字符串序列需要编码，二进制序列需要解码。")]),t._v(" "),s("blockquote",[s("p",[t._v("字符串是文本的抽象表示，是与任何特定二进制表示无关的抽象实体。")])]),t._v(" "),s("p",[t._v("从 Python 3 的str 对象中获取的元素是 Unicode 字符，从 Python 2 的 str 对象中获取的是原始字节序列(默认编码方式是ascii码)。")]),t._v(" "),s("h2",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("p",[t._v("Python 函数是对象。可以把函数 赋值给变量，然后通过变量名调用。")]),t._v(" "),s("h3",{attrs:{id:"可调用对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可调用对象"}},[t._v("#")]),t._v(" 可调用对象")]),t._v(" "),s("ol",[s("li",[t._v("用户定义的函数")]),t._v(" "),s("li",[t._v("内置函数，如 "),s("code",[t._v("len")]),t._v(" 或 "),s("code",[t._v("time.strftime")])]),t._v(" "),s("li",[t._v("内置方法，如 "),s("code",[t._v("dict.get")])]),t._v(" "),s("li",[t._v("方法，即类的定义体中定义的函数")]),t._v(" "),s("li",[t._v("类")]),t._v(" "),s("li",[t._v("类的实例，实现了 "),s("code",[t._v("__call__")]),t._v(" 方法")]),t._v(" "),s("li",[t._v("生成器函数，使用 yield 关键字的函数或方法。调用生成器函数返回的是生成器对象。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("调用类时会运行类的 "),s("code",[t._v("__new__")]),t._v(" 方法创建一个实例，然后运行 "),s("code",[t._v("__init__")]),t._v(" 方法，初始化实例，最后把实例返回给调用方。")])]),t._v(" "),s("h3",{attrs:{id:"函数参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[t._v("#")]),t._v(" 函数参数")]),t._v(" "),s("p",[s("strong",[t._v("位置参数")]),t._v(" 也叫必传参数，顺序参数，必须在调用函数时明确提供的参数。若实参指定了位置参数的参数名，那么可不按顺序调用，甚至可以在默认参数后面。")]),t._v(" "),s("p",[t._v("在函数定义时提供了默认值，则称之为 "),s("strong",[t._v("默认参数")]),t._v("。函数定义时，默认参数必须在位置参数后面，否则会报错。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("函数调用时，默认参数总是指向同一个变量，即默认参数的值可能被改变。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a\n")])])])]),t._v(" "),s("h4",{attrs:{id:"动态参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态参数"}},[t._v("#")]),t._v(" 动态参数")]),t._v(" "),s("p",[t._v("Python 的动态参数有两种，分别是 "),s("code",[t._v("*args")]),t._v(" 和 "),s("code",[t._v("**kwargs")]),t._v(".")]),t._v(" "),s("p",[t._v("函数定义时，一个星号表示接收任意个参数，调用时会将实参打包成元组。传递数组时参给 "),s("code",[t._v("*args")]),t._v("时，实参前也要加上 "),s("code",[t._v("*")]),t._v("，否则会报错。")]),t._v(" "),s("p",[t._v("函数定义时，两个星表示接受键值对的动态参数。调用时会将实参打包成字典。传递字典时参给 "),s("code",[t._v("**kwargs")]),t._v("时，实参前也要加上 "),s("code",[t._v("**")]),t._v("，否则会报错。")]),t._v(" "),s("h3",{attrs:{id:"函数注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数注解"}},[t._v("#")]),t._v(" 函数注解")]),t._v(" "),s("h3",{attrs:{id:"装饰器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),s("p",[t._v("装饰器能把被装饰的函数替换成其他函数，装饰器在加载模块时立即执行。")]),t._v(" "),s("h2",{attrs:{id:"迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),s("p",[t._v("在 Python 语言内部，迭代器用于支持:")]),t._v(" "),s("ul",[s("li",[t._v("for 循环")]),t._v(" "),s("li",[t._v("构建和扩展集合类型")]),t._v(" "),s("li",[t._v("逐行遍历文本文件")]),t._v(" "),s("li",[t._v("列表推导、字典推导和集合推导")]),t._v(" "),s("li",[t._v("元组拆包")]),t._v(" "),s("li",[t._v("调用函数时，使用 * 拆包实参")])]),t._v(" "),s("p",[t._v("解释器需要迭代对象 x 时，会自动调用 "),s("code",[t._v("iter(x)")]),t._v("。")]),t._v(" "),s("p",[t._v("内置的 "),s("code",[t._v("iter")]),t._v(" 函数作用:")]),t._v(" "),s("ol",[s("li",[t._v("检查对象是否实现了 "),s("code",[t._v("__iter__")]),t._v(" 方法，如果实现了就调用它，获取一个迭代器。")]),t._v(" "),s("li",[t._v("如果没有实现 "),s("code",[t._v("__iter__")]),t._v(" 方法，但是实现了 "),s("code",[t._v("__getitem__")]),t._v(" 方法， Python 会创建一个迭代器，该迭代器尝试按顺序(从索引 0 开始)获取元素，直至 "),s("code",[t._v("IndexError")]),t._v("。")]),t._v(" "),s("li",[t._v("如果尝试失败，Python 抛出 "),s("code",[t._v("TypeError")]),t._v(" 异常。")])]),t._v(" "),s("p",[t._v("可迭代的对象：")]),t._v(" "),s("ol",[s("li",[t._v("对象实现了能返回迭代器的 "),s("code",[t._v("__iter__")]),t._v(".")]),t._v(" "),s("li",[t._v("对象实现了 "),s("code",[t._v("__getitem__")]),t._v(" 方法，而且其参数是从零开始的索引。")]),t._v(" "),s("li",[t._v("序列都是可迭代的，如 "),s("code",[t._v("list")]),t._v("、"),s("code",[t._v("tuple")]),t._v("、"),s("code",[t._v("str")]),t._v(" 等。")])]),t._v(" "),s("p",[t._v("可迭代的对象和迭代器之间的关系：Python 从可迭代的对象中获取迭代器。")]),t._v(" "),s("p",[t._v("标准的迭代器接口有两个方法。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("__next__")]),t._v(" 返回下一个可用的元素，如果没有元素了，抛出 "),s("code",[t._v("StopIteration")]),t._v(" 异常。")]),t._v(" "),s("li",[s("code",[t._v("__iter__")]),t._v(" 返回 self，以便在应该使用可迭代对象的地方使用迭代器，例如在 for 循环中。")])]),t._v(" "),s("p",[t._v("一般来说，不要把可迭代对象当作迭代器，而是使用 "),s("code",[t._v("iter")]),t._v(" 函数获取迭代器，因为可迭代对象可以被多次迭代，而迭代器只能被迭代一次。")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("样例代码")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n         self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start\n         self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stop\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__iter__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" MyRangeIterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRangeIterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rangeobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rangeobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rangeobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__iter__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self             \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__next__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("         \n        retval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current   \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" retval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" StopIteration \n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("       \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" retval           \n")])])])]),t._v(" "),s("h2",{attrs:{id:"生成器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[t._v("#")]),t._v(" 生成器")]),t._v(" "),s("p",[t._v("只要 Python 函数的定义体中有 "),s("code",[t._v("yield")]),t._v(" 关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。")]),t._v(" "),s("p",[t._v("把生成器对象传给 "),s("code",[t._v("next")]),t._v(" 函数时，生成器函数会向前，执行至下一个 yield 语句，返回产出的值，并在函数定义体的当前位置暂停。最终，函数的定义体返回时，外层的生成器对象会抛出 "),s("code",[t._v("StopIteration")]),t._v(" 异常。")]),t._v(" "),s("p",[t._v("生成器对象实现了迭代器接口，可以 for 循环遍历。")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("样例代码")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("gen_AB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'next'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" gen_AB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),s("h3",{attrs:{id:"is-和-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#is-和-id"}},[t._v("#")]),t._v(" is 和 id")]),t._v(" "),s("p",[s("code",[t._v("==运算符")]),t._v(" 比较两个对象的值(对象中保存的数据)，而 "),s("code",[t._v("is")]),t._v(" 比较对象的标识。")]),t._v(" "),s("p",[t._v("在变量和单例值之间比较时，应该使用 "),s("code",[t._v("is")]),t._v("。例如，检查变量绑定的值是不是 "),s("code",[t._v("None")]),t._v(". 重写 "),s("code",[t._v("__eq__")]),t._v(" 方法，可以改变 "),s("code",[t._v("==")]),t._v(" 运算符的逻辑。")]),t._v(" "),s("p",[t._v("Python 提供了两种方式获取对象的字符串表示形式的方法。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("__str__")]),t._v(" 方法，用户理解的字符串表示形式。")]),t._v(" "),s("li",[s("code",[t._v("__repr__")]),t._v(" 方法，程序员理解的字符串表示形式。")])]),t._v(" "),s("h3",{attrs:{id:"classmethod-与-staticmethod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classmethod-与-staticmethod"}},[t._v("#")]),t._v(" classmethod 与 staticmethod")]),t._v(" "),s("p",[t._v("二者都可以通过类名调用，区别在于：")]),t._v(" "),s("p",[s("code",[t._v("classmethod")]),t._v(" 修饰符对应的函数不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，可以用来实例化对象。")]),t._v(" "),s("p",[s("code",[t._v("staticmethod")]),t._v(" 修饰符对应的函数和类有关的功能，但又无需类或实例参与，出于代码组织的考虑。")])])}),[],!1,null,null,null);s.default=e.exports}}]);