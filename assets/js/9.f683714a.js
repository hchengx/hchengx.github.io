(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{282:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"effective-c-笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#effective-c-笔记"}},[t._v("#")]),t._v(" Effective C++ 笔记")]),t._v(" "),s("h2",{attrs:{id:"术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[t._v("#")]),t._v(" 术语")]),t._v(" "),s("p",[s("strong",[t._v("声明式(declaration)")]),t._v(" 告诉编译器名称和类型，略去细节。 函数的声明揭示了其签名，包括其参数和返回值。")]),t._v(" "),s("p",[s("strong",[t._v("定义式(definition)")]),t._v(" 提供了声明里遗漏的细节，并分配内存。对函数而言，定义提供了代码本体。")]),t._v(" "),s("p",[s("strong",[t._v("初始化(initilazation)")]),t._v(" 给对象赋初值。")]),t._v(" "),s("p",[t._v("声明和定义可以同时进行。")]),t._v(" "),s("h2",{attrs:{id:"条款-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-1"}},[t._v("#")]),t._v(" 条款 1")]),t._v(" "),s("p",[t._v("C++ 是一个多重范型编程语言，支持过程形式、面向对象形式、函数形式、范型形式、元编程形式的语言。")]),t._v(" "),s("h2",{attrs:{id:"条款-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-2"}},[t._v("#")]),t._v(" 条款 2")]),t._v(" "),s("p",[t._v("由 "),s("code",[t._v("define")]),t._v(" 定义的常量会在预处理时替换，不会进入记号表（symbol table)，不利于调试。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("const")]),t._v(" 常量：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" AspectRatio "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.653")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("const")]),t._v(" 对象默认仅在文件内有效。")]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("：")]),t._v(" "),s("ol",[s("li",[t._v("由于常量定义式被放在头文件内，因此定义常量指针时，要将指针声明为 "),s("code",[t._v("const")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" authorName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Scott Meyers"')]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("若为 class 内的常量，应设置为 "),s("code",[t._v("static")]),t._v(", 保证只有一个实体。")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GamePlayer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" NumTurns "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 常量声明式，可以不需要定义式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" socres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NumTurns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用该常量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对于 "),s("code",[t._v("static")]),t._v(" 且为整型的类变量，如上面的 "),s("code",[t._v("NumTurns")]),t._v("，可以不需要提供定义式。")]),t._v(" "),s("p",[t._v("关于 "),s("code",[t._v("NumTurns")]),t._v(" 的疑问，参考:")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://www.stroustrup.com/bs_faq2.html#in-class",target:"_blank",rel:"noopener noreferrer"}},[t._v("How do I define an in-class constant?"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is the difference between a definition and a declaration?"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/34629876/why-is-declaration-and-definition-defined-this-way-in-effective-c",target:"_blank",rel:"noopener noreferrer"}},[t._v("why static const int NumTurns = 5; is not a definition?"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/34629876/why-is-declaration-and-definition-defined-this-way-in-effective-c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Why is declaration and definition defined this way in Effective C++?"),s("OutboundLink")],1)])])]),t._v(" "),s("p",[t._v("一个属于枚举类型(enumerated type) 的数值可充当 "),s("code",[t._v("ints")]),t._v(" 使用，但无法被取地址，如果不想指针指向你的整数常量，可使用  "),s("code",[t._v("enum")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[t._v("一个属于枚举类型的数值可充当 "),s("code",[t._v("ints")]),t._v(" 使用。")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GamePlayer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("NumTurns "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" socres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NumTurns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用该常量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果你想获得 "),s("code",[t._v("define")]),t._v(" 实现宏的效果（减少函数调用），可以使用 "),s("code",[t._v("template inline")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"条款-3-尽可能使用-const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-3-尽可能使用-const"}},[t._v("#")]),t._v(" 条款 3 尽可能使用 "),s("code",[t._v("const")])]),t._v(" "),s("p",[s("code",[t._v("const")]),t._v(" 可以修饰全局变量，也可以修饰文件、函数等。")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("const")]),t._v(" 修饰指针变量，则")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("const")]),t._v(" 出现在星号左边，表示被指物是常量；")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("const")]),t._v(" 出现在星号右边，表示指针自身是常量，其指向不可变；")])])]),t._v(" "),s("p",[t._v("令函数返回一个常量，可以减少不恰当使用造成的问题，如错把 "),s("code",[t._v("==")]),t._v(" 当 "),s("code",[t._v("=")]),t._v(".")]),t._v(" "),s("p",[t._v("把某些成员函数限定为 "),s("code",[t._v("const")]),t._v(", 一来更易理解函数的含义，二来通过“操作 const 对象”可以改善代码效率，参考 条款 20.")]),t._v(" "),s("p",[t._v("添加 "),s("code",[t._v("const")]),t._v(" 属性可以导致重载，包括给参数添加 "),s("code",[t._v("const")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"条款-4-构造函数与初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-4-构造函数与初始化"}},[t._v("#")]),t._v(" 条款 4 构造函数与初始化")]),t._v(" "),s("p",[t._v("永远在使用对象之前初始化。对于内置类型，需要手工完成。对于对象，确保构造函数将对象每一个成员初始化。")]),t._v(" "),s("p",[t._v("构造函数中，容易混淆 "),s("strong",[t._v("赋值")]),t._v(" 和 "),s("strong",[t._v("初始化")]),t._v(".")]),t._v(" "),s("p",[t._v("对象成员非内置类型变量的初始化动作发生在进入构造函数本体 "),s("strong",[t._v("之前")]),t._v("。")]),t._v(" "),s("p",[t._v("一个较好的写法是，使用 "),s("code",[t._v("member initialization list")]),t._v(" 替换赋值动作。")]),t._v(" "),s("p",[t._v("C++ 成员初始化次序比较固定：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("base classes")]),t._v(" 早于 "),s("code",[t._v("derived classes")]),t._v(" 被初始化。")]),t._v(" "),s("li",[t._v("class 的成员变量总是以其声明的顺序被初始化。")])]),t._v(" "),s("p",[t._v("static 对象生命周期从构造出来开始直至程序结束。这种对象包括 global 对象，定义于 namespace 作用域内的对象、在 classes 内、在函数内、在 file 作用域内被声明为 "),s("code",[t._v("static")]),t._v(" 的对象。其中，函数内的 static 对象被称为 "),s("code",[t._v("local static 对象")]),t._v("，其他被称为 "),s("code",[t._v("non-local static 对象")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"条款-5-默认生成的构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-5-默认生成的构造函数"}},[t._v("#")]),t._v(" 条款 5 默认生成的构造函数")]),t._v(" "),s("p",[t._v("一个类必须有 "),s("code",[t._v("默认构造函数")]),t._v("、"),s("code",[t._v("copy 构造函数")]),t._v("、"),s("code",[t._v("copy 赋值操作符")]),t._v("、"),s("code",[t._v("析构函数")]),t._v(". 如果没有显式声明，编译器会隐式声明，且都是 "),s("code",[t._v("public & inline")]),t._v(".")]),t._v(" "),s("p",[t._v("编译器生成的默认构造函数或析构函数只会调用基类构造函数或析构函数、non-static 成员变量的构造函数或析构函数。")]),t._v(" "),s("p",[t._v("对于 copy 构造函数和 copy 赋值操作符，编译器创建的版本只是把来源对象中的每一个 non-static 成员变量拷贝到目标对象。")]),t._v(" "),s("p",[t._v("编译器构造出来的  copy 赋值操作符需合法且有意义。如果一个类的成员有引用的话，则需要自定义 copy 赋值操作符。")]),t._v(" "),s("h2",{attrs:{id:"条款-6-拒绝编译器生成的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-6-拒绝编译器生成的函数"}},[t._v("#")]),t._v(" 条款 6 拒绝编译器生成的函数")]),t._v(" "),s("p",[t._v("为了阻止编译器自动生成的函数（条款 5），可以手动将其声明为 "),s("code",[t._v("private")]),t._v(" 并不予实现。也可以 private 继承 "),s("code",[t._v("Uncopyable")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"条款-7-基类析构函数为-virtual"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-7-基类析构函数为-virtual"}},[t._v("#")]),t._v(" 条款 7 基类析构函数为 virtual")]),t._v(" "),s("p",[t._v("当 derived class 对象由一个 base class 指针删除时，如果 base class 的析构函数为 non-virtual，其行为是未定义的，即可能 对象中 derived 成分没有被销毁，造成资源泄露。")]),t._v(" "),s("p",[t._v("解决办法:")]),t._v(" "),s("p",[t._v("设置 base class 析构函数为 virtual。")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("将所有 class 的析构函数声明为 virtual 是错误的，这会增大 class 的体积。常见的做法是，当 class 内至少含一个 virtual 函数，才声明 virtual 析构函数。")]),t._v(" "),s("p",[t._v("给 base class 一个 virtual 析构函数只适用 polymorphic base class 身上。")]),t._v(" "),s("h2",{attrs:{id:"条款-8-析构函数与异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-8-析构函数与异常"}},[t._v("#")]),t._v(" 条款 8 析构函数与异常")]),t._v(" "),s("p",[t._v("析构函数最好不要抛出异常。原因：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("抛出异常后的代码不会执行，可能会造成资源泄露。")])]),t._v(" "),s("li",[s("p",[t._v("在异常的传播过程中进行栈展开。在栈展开的过程中就会调用已经在栈构造好的对象的析构函数来释放资源，此时若其他析构函数本身也抛出异常，则前一个异常尚未处理，又有新的异常，会造成程序崩溃。")])])]),t._v(" "),s("p",[t._v("解决办法：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("如果异常出现在析构函数里，应该捕捉异常，而不是抛出异常。")])]),t._v(" "),s("li",[s("p",[t._v("异常处理应该出现在普通函数而非析构函数。")])])]),t._v(" "),s("h2",{attrs:{id:"条款-9-构造函数和析构函数不调用-virtual-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-9-构造函数和析构函数不调用-virtual-函数"}},[t._v("#")]),t._v(" 条款 9 构造函数和析构函数不调用 virtual 函数")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("不要在构造函数中调用虚函数的原因：因为父类对象会在子类之前进行构造，此时子类部分的数据成员还未初始化， 因此调用子类的虚函数是不安全的，故而C++不会进行动态联编。")])]),t._v(" "),s("li",[s("p",[t._v("不要在析构函数中调用虚函数的原因：析构函数是用来销毁一个对象的，在销毁一个对象时，先调用子类的析构函数，然后再调用基类的析构函数。所以在调用基类的析构函数时，派生类对象的数据成员已经“销毁”，这个时再调用子类的虚函数已经没有意义了。")])])]),t._v(" "),s("h2",{attrs:{id:"条款-10-operator-返回-reference-to-this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-10-operator-返回-reference-to-this"}},[t._v("#")]),t._v(" 条款 10 "),s("code",[t._v("operator =")]),t._v(" 返回 reference to *this")]),t._v(" "),s("p",[t._v("为了实现 "),s("strong",[t._v("连锁赋值")]),t._v("，赋值操作符必须返回一个 reference 指向操作符的左侧实参。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Widget")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Widget"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Widget"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("a",{attrs:{href:"https://www.zhihu.com/question/22821783",target:"_blank",rel:"noopener noreferrer"}},[t._v("c++中有些重载运算符为什么要返回引用？"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"条款-11-operator-处理自我赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-11-operator-处理自我赋值"}},[t._v("#")]),t._v(" 条款 11 "),s("code",[t._v("operator=")]),t._v(" 处理自我赋值")]),t._v(" "),s("p",[t._v("自我赋值可能出现问题")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bitmap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Widget")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Bitmap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nWidget"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Widget"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Widget "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" pb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bitmap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果 "),s("code",[t._v("*this")]),t._v(" 和 "),s("code",[t._v("rhs")]),t._v(" 是同一个对象，就会出现指针指向一个被删除的对象。")]),t._v(" "),s("p",[t._v("解决办法：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 证同测试，identity test")]),t._v("\n")])])]),s("p",[t._v("这样只解决了部分问题：不是异常安全的，如果 "),s("code",[t._v("new")]),t._v(" 发生了异常，指针仍指向一块被删除的对象。")]),t._v(" "),s("p",[t._v("调换 "),s("code",[t._v("new")]),t._v(" 和 "),s("code",[t._v("delete")]),t._v(" 的先后顺序可以解决问题，唯一的问题是如果 "),s("code",[t._v("*this")]),t._v(" 和 "),s("code",[t._v("rhs")]),t._v(" 相同时会有效率问题。")]),t._v(" "),s("h2",{attrs:{id:"条款-12-复制对象勿忘了每一个成分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-12-复制对象勿忘了每一个成分"}},[t._v("#")]),t._v(" 条款 12 复制对象勿忘了每一个成分")]),t._v(" "),s("p",[t._v("手动实现 copy 复制构造函数时，不要忘了每一个成分：当添加一个成员变量时，同时修改函数。如果忘记，编译器并不会提醒你。")]),t._v(" "),s("p",[t._v("不要忘记复制 base class 的成分。")]),t._v(" "),s("h2",{attrs:{id:"条款-13-对象管理资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-13-对象管理资源"}},[t._v("#")]),t._v(" 条款 13 对象管理资源")]),t._v(" "),s("p",[t._v("把资源放入对象中，便可以倚赖 "),s("strong",[t._v("析构函数")]),t._v(" 自动调用机制确保资源被释放。")]),t._v(" "),s("p",[t._v("两个常用的 RAII classes 是 "),s("code",[t._v("shared_ptr")]),t._v(" 和 "),s("code",[t._v("unique_ptr")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"条款-14-资源管理类小心-copy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-14-资源管理类小心-copy"}},[t._v("#")]),t._v(" 条款 14 资源管理类小心 copy")]),t._v(" "),s("p",[t._v("处理 RAII 类的复制，一般有两种情况：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("禁止复制")])]),t._v(" "),s("li",[s("p",[t._v("使用引用计数")])])]),t._v(" "),s("h2",{attrs:{id:"条款-15-raii-类应该提供对原始资源的访问接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-15-raii-类应该提供对原始资源的访问接口"}},[t._v("#")]),t._v(" 条款 15 RAII 类应该提供对原始资源的访问接口")]),t._v(" "),s("p",[t._v("许多 API 直接处理原始资源，因此需要将 RAII 对象转换为原始资源。")]),t._v(" "),s("p",[t._v("显示转换：提供 "),s("code",[t._v("get()")]),t._v(" 函数。")]),t._v(" "),s("p",[t._v("隐式转换：重载操作符（"),s("code",[t._v("*")]),t._v(","),s("code",[t._v("->")]),t._v(","),s("code",[t._v("conversion operator")]),t._v(")。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/19666392/what-is-operator-class-name-const",target:"_blank",rel:"noopener noreferrer"}},[t._v("what is operator class_name() const?"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("显式转换较为麻烦，隐式转换可能会增加错误发生的机会。")]),t._v(" "),s("h2",{attrs:{id:"条款-16-delete-要和-new-匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-16-delete-要和-new-匹配"}},[t._v("#")]),t._v(" 条款 16 delete 要和 new 匹配")]),t._v(" "),s("p",[t._v("删除指针所指空间除了会归还空间，会先调用析构函数。")]),t._v(" "),s("p",[t._v("被删除的指针可能指向单个对象，也可能指向对象数组。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// delete one object")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// delete object array.")]),t._v("\n")])])]),s("p",[t._v("如果对数组形式做 "),s("code",[t._v("typedef")]),t._v(" 动作尤为要注意。")]),t._v(" "),s("h2",{attrs:{id:"条款-17-独立语句将-newed-对象放置智能指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-17-独立语句将-newed-对象放置智能指针"}},[t._v("#")]),t._v(" 条款 17 独立语句将 newed 对象放置智能指针")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processWidget")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shared_ptr")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Widget"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Widget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("priority")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("C++ 并无规定参数执行顺序，以上语句可能有如下顺序：")]),t._v(" "),s("ol",[s("li",[t._v("执行 "),s("code",[t._v("new Widget")])]),t._v(" "),s("li",[t._v("执行 "),s("code",[t._v("priority()")])]),t._v(" "),s("li",[t._v("调用 "),s("code",[t._v("shared_ptr")]),t._v(" 构造函数")])]),t._v(" "),s("p",[t._v("如果 2 中发生异常，3执行不了，就会造成资源泄露。")]),t._v(" "),s("p",[t._v("解决办法：")]),t._v(" "),s("p",[t._v("拆分语句，手动确定上述顺序")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" priority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("priority")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processWidget")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shared_ptr")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Widget"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Widget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" priority"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"条款-18-接口设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-18-接口设计"}},[t._v("#")]),t._v(" 条款 18 接口设计")]),t._v(" "),s("p",[t._v("接口应易于使用。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" month"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" day"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" year"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Month"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" month"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Day"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" day"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Year"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" year"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("前者至少有两个问题，容易以错误次序传递参数；容易传递无效参数。")]),t._v(" "),s("p",[t._v("可以通过导入新类型预防此类问题，如后者。")]),t._v(" "),s("p",[t._v("预防客户端错误的另一个方法是限制类型内什么事可做，什么不可做。常见的限制是加上 "),s("code",[t._v("const")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("避免类型的行为与内置类型不一致")]),t._v("，除非有不得不做的理由。")]),t._v(" "),s("h2",{attrs:{id:"条款-19-设计-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-19-设计-class"}},[t._v("#")]),t._v(" 条款 19 设计 class")]),t._v(" "),s("p",[t._v("规范：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对象如何创建和销毁")])]),t._v(" "),s("li",[s("p",[t._v("初始化和赋值的区别")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("passed by value")]),t._v(" 意味着什么")])]),t._v(" "),s("li",[s("p",[t._v("什么是新 type 的合法值")])]),t._v(" "),s("li",[s("p",[t._v("需要继承吗")])]),t._v(" "),s("li",[s("p",[t._v("与其他类型之间的转换")])]),t._v(" "),s("li",[s("p",[t._v("需要什么样的操作符和函数")])]),t._v(" "),s("li",[s("p",[t._v("哪些函数是不需要的（设为 private)")])]),t._v(" "),s("li",[s("p",[t._v("一般化，是否需要 "),s("code",[t._v("template")])])])]),t._v(" "),s("h2",{attrs:{id:"条款-20-pass-by-reference-to-const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-20-pass-by-reference-to-const"}},[t._v("#")]),t._v(" 条款 20 "),s("code",[t._v("pass-by-reference-to-const")])]),t._v(" "),s("p",[s("code",[t._v("pass-by-reference-to-const")]),t._v(" 方式效率较高，因为没有任何新对象被创建。"),s("code",[t._v("const")]),t._v(" 保证传入的参数不被改变。")]),t._v(" "),s("p",[t._v("当把一个派生类对象赋给一个基类对象时，会发生 "),s("strong",[t._v("对象切割")]),t._v("。当一个 "),s("code",[t._v("derived class")]),t._v(" 对象以 by value 方式传递并视为一个 "),s("code",[t._v("base class")]),t._v(" 对象时，"),s("code",[t._v("base class")]),t._v(" 的 copy 构造函数会被调用，"),s("code",[t._v("derived class")]),t._v("部分会被切割掉。")]),t._v(" "),s("p",[t._v("传引用可以避免对象切割问题。")]),t._v(" "),s("p",[t._v("对于内置类型、STL的迭代器和函数对象，"),s("code",[t._v("pass-by-value")]),t._v(" 比较适当。")]),t._v(" "),s("blockquote",[s("p",[t._v("大部分迭代器都是比较小的，复制构造函数一般也只是平凡复制，复制开销并不大，反倒传引用因为经常需要间接访问所以影响性能。")])]),t._v(" "),s("h2",{attrs:{id:"条款-21-函数返回引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-21-函数返回引用"}},[t._v("#")]),t._v(" 条款 21 函数返回引用")]),t._v(" "),s("p",[t._v("函数盲目地返回引用可能会导致程序错误或内存泄露。")]),t._v(" "),s("p",[t._v("将一个函数内部的变量（on stack)通过传引用的方式返回会导致函数返回前变量已经析构。")]),t._v(" "),s("p",[t._v("在 heap 新建变量并返回引用，容易忘记析构，造成内存泄露。")]),t._v(" "),s("h2",{attrs:{id:"条款-22-成员变量私有化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-22-成员变量私有化"}},[t._v("#")]),t._v(" 条款 22 成员变量私有化")]),t._v(" "),s("p",[t._v("将成员变量设置为 "),s("code",[t._v("private")]),t._v(" 可以更精确地控制对成员变量的访问。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessLevels")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" readOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setReadWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" readWrite "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getReadWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" readWrite"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setWriteOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" writeOnly "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" noAccess"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" readOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" readWrite"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" writeOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("通过函数来访问成员变量，日后可以改变成员变量而不会对 class 的使用者造成影响。")]),t._v(" "),s("h2",{attrs:{id:"条款-23-non-member、non-friend-函数替换-member-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-23-non-member、non-friend-函数替换-member-函数"}},[t._v("#")]),t._v(" 条款 23 non-member、non-friend 函数替换 member 函数")]),t._v(" "),s("p",[t._v("在许多方面，member 函数带来的封装性低于 non-member 函数。")]),t._v(" "),s("h2",{attrs:{id:"条款-24-若所有参数皆需要类型转换-采用-non-member-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-24-若所有参数皆需要类型转换-采用-non-member-函数"}},[t._v("#")]),t._v(" 条款 24 若所有参数皆需要类型转换，采用 non-member 函数")]),t._v(" "),s("p",[t._v("考虑以下代码")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rational")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 允许隐式转换")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rational")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" numerator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" denominator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("numerator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" numerator_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("denominator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" denominator_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果想要支持 "),s("code",[t._v("Rational")]),t._v(" 类型的乘法。可能会考虑以下代码")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rational")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("但是，这个乘法不支持 "),s("code",[t._v("2 * a")]),t._v(" 的形式。正确的方式是定义一个 non-member 函数")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rational")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("numerator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("numerator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("denominator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("denominator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("请记住")]),t._v("：如果你需要为某个函数的所有参数提供类型转换，那么你应该使用 non-member 函数。")]),t._v(" "),s("h2",{attrs:{id:"条款-25-考虑写一个不抛异常的-swap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-25-考虑写一个不抛异常的-swap"}},[t._v("#")]),t._v(" 条款 25 考虑写一个不抛异常的 "),s("code",[t._v("swap")])]),t._v(" "),s("p",[t._v("TODO")]),t._v(" "),s("h2",{attrs:{id:"条款-26-尽可能延后变量定义的时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-26-尽可能延后变量定义的时间"}},[t._v("#")]),t._v(" 条款 26 尽可能延后变量定义的时间")]),t._v(" "),s("p",[t._v("变量定义可能会有构造函数和析构函数的成本。或许你认为你不可能定义一个不使用的变量，但须考虑到异常。")]),t._v(" "),s("p",[t._v("还要尽可能减少构造函数的开销，比如先构造再赋值不如直接用值构造。")]),t._v(" "),s("h2",{attrs:{id:"条款-27-尽量减少转型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-27-尽量减少转型"}},[t._v("#")]),t._v(" 条款 27 尽量减少转型")]),t._v(" "),s("p",[t._v("C++ 提供四种新式转型：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("const_cast")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dynamic_cast")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reinterpret_cast")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token generic-function"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("static_cast")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("cosnt_cast 移除变量的常量特性.T必须是指针或引用。")]),t._v(" "),s("li",[t._v("dynamic_cast  在执行期进行多态类(有虚函数)之间的转换,用于运行时类型识别.T必须是指针或引用,expression必须返回多态类类型.。它是唯一无法由旧式语法执行的动作，也是唯一可能耗费重大运行成本的转型动作。")]),t._v(" "),s("li",[t._v("reinterpret_cast 变量二进制位层次上的重新解释,并没有对变量的二进制储存方式进行更改.T 必须是指针,引用或算术类型。")]),t._v(" "),s("li",[t._v("static_cast 可以执行大多数类型的转换。但与 const_cast 类型相比,static_cast 不能去除 const 或 volatile 属性,与 dynamic_cast 相比不支持运行时类型识别,与 reinterpret_cast 相比不是位层次上的重新解释,而是对位进行改变后的重新编码.")])]),t._v(" "),s("h2",{attrs:{id:"条款-28-避免返回-handle-指向对象内部成分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-28-避免返回-handle-指向对象内部成分"}},[t._v("#")]),t._v(" 条款 28 避免返回 handle 指向对象内部成分")]),t._v(" "),s("h2",{attrs:{id:"条款-30-了解-inline"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-30-了解-inline"}},[t._v("#")]),t._v(" 条款 30 了解 "),s("code",[t._v("inline")])]),t._v(" "),s("p",[t._v("Inline 函数看起来像函数，动作像函数，比宏好得多，调用时没有函数调用时额外开销。inline 函数的观念是，“对函数的每个调用”都以函数本体替换之。这样可能增加代码的大小。")]),t._v(" "),s("p",[s("code",[t._v("inline")]),t._v(" 造成的代码膨胀会导致额外的换页行为，降低 cache 的命中率，带来效率损失。")]),t._v(" "),s("p",[t._v("但如果 "),s("code",[t._v("inline")]),t._v(" 函数的本体很小，将函数 inlining 可能会导致更小的代码和更高的 cache 命中率。")]),t._v(" "),s("p",[s("code",[t._v("inline")]),t._v(" 只是一个申请，编译器不一定响应。大部分编译器拒绝 "),s("code",[t._v("inline")]),t._v(" 太过复杂的函数。")]),t._v(" "),s("p",[s("code",[t._v("inline")]),t._v(" 对 virtual 函数无效。")]),t._v(" "),s("p",[t._v("某个类的构造函数看起来是空的，使用 inline 合适，其实是错误的想法；\nC++的对象在被创建和销毁时：创建一个对象，每个 base class 及每个成员会自动构造；销毁一个对象时，反向进行析构及销毁；如果遇到异常，编译器尝试的模板代码更多；一旦被 inlined，所有子类都要插入 base class 构造函数的所有自动生成的代码，急速膨胀。")]),t._v(" "),s("p",[t._v("inline 函数无法随着程序库的升级而升级。如果重写了 inline 函数，必须重写编译。")]),t._v(" "),s("h2",{attrs:{id:"条款-48-初涉模板元编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-48-初涉模板元编程"}},[t._v("#")]),t._v(" 条款 48 初涉模板元编程")]),t._v(" "),s("p",[t._v("模板元编程(TMP) 是编写 template-based C++ 程序并执行于编译期的过程。")]),t._v(" "),s("p",[t._v("模板元编程使得某些困难甚至不可能的事情变得容易。由于模板元编程执行于 C++ 编译期，因此可以将某些运行期才能检测到的错误提前检测出来。另外，使用模板元编程的 C++ 程序有较小的可执行文件、较短的运行期、较少的内存需求。缺点是增加了编译时间。")]),t._v(" "),s("h2",{attrs:{id:"条款-49-了解-new-handler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条款-49-了解-new-handler"}},[t._v("#")]),t._v(" 条款 49 了解 new-handler")]),t._v(" "),s("p",[t._v("当 "),s("code",[t._v("operator new")]),t._v(" 无法进行内存分配，就会抛异常。在抛异常前，会调用错误处理函数，"),s("code",[t._v("new_handler")]),t._v("。客户可以通过调用 "),s("code",[t._v("set_new_handler")]),t._v(" 定制这个函数。")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("new_handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    new_handler "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_new_handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new_handler p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("set_new_handler")]),t._v(" 的参数是一个指针，指向无法分配足够内存时调用的函数，返回一个指针，指向被替换的 new-handler 函数。")]),t._v(" "),s("p",[t._v("好的 "),s("code",[t._v("new-handler")]),t._v(" 应该：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("让更多内存被使用")])]),t._v(" "),s("li",[s("p",[t._v("安装另一个 new-handler")])]),t._v(" "),s("li",[s("p",[t._v("卸除 new-handler")])]),t._v(" "),s("li",[s("p",[t._v("抛出 "),s("code",[t._v("bad_alloc")])])]),t._v(" "),s("li",[s("p",[t._v("不返回，通常 "),s("code",[t._v("abort")]),t._v(" 或 "),s("code",[t._v("exit")]),t._v(".")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);